services:
  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/adminer`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http
      - traefik.http.services.${STACK_NAME?Variable not set}-adminer.loadbalancer.server.port=8080

  qdrant:
    image: qdrant/qdrant
    restart: always
    volumes:
      - app-qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT__SERVICE__API_KEY?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-qdrant-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/qdrant`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-qdrant-http.entrypoints=http
      - traefik.http.services.${STACK_NAME?Variable not set}-qdrant.loadbalancer.server.port=6333

  redis:
    image: redis:alpine
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-redis-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/redis`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-redis-http.entrypoints=http
      - traefik.http.services.${STACK_NAME?Variable not set}-redis.loadbalancer.server.port=6379

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    restart: always
    volumes:
      - app-backend-model-cache:/app/cache
      - app-upload-data:/app/upload-data
    networks:
      - traefik-public
      - default
    depends_on:
      - redis
      - db
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DOMAIN=${DOMAIN}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http

  flower:
    image: mher/flower:2.0
    restart: always
    networks:
      - traefik-public
      - default
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    command:
      - celery
      - "--broker=redis://redis:6379/0"
      - flower
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/flower`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.entrypoints=http
      - traefik.http.services.${STACK_NAME?Variable not set}-flower.loadbalancer.server.port=5555

  frontend:
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}"
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=http://${DOMAIN?Variable not set}
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=8080
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http

volumes:
  app-db-data:
  app-qdrant-data:
  app-backend-model-cache:
  app-upload-data:

networks:
  traefik-public:
    external: true
