services:
  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.staging-adminer-http.entrypoints=http
      - traefik.http.services.staging-adminer.loadbalancer.server.port=8080
      - traefik.http.routers.staging-adminer-http.rule=Host(`${HOST?Variable not set}`) && PathPrefix(`/staging/adminer`)
      - traefik.http.middlewares.strip-staging.stripprefix.prefixes=/staging
      - traefik.http.routers.staging-adminer-http.middlewares=strip-staging

  qdrant:
    image: qdrant/qdrant
    restart: always
    volumes:
      - app-qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT__SERVICE__API_KEY?Variable not set}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.staging-qdrant-http.entrypoints=http
      - traefik.http.services.staging-qdrant.loadbalancer.server.port=6333
      - traefik.http.routers.staging-qdrant-http.rule=Host(`${HOST?Variable not set}`) && PathPrefix(`/staging/qdrant`)
      - traefik.http.middlewares.strip-staging.stripprefix.prefixes=/staging
      - traefik.http.routers.staging-qdrant-http.middlewares=strip-staging

  redis:
    image: redis:alpine
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.staging-redis-http.entrypoints=http
      - traefik.http.services.staging-redis.loadbalancer.server.port=6379
      - traefik.http.routers.staging-redis-http.rule=Host(`${HOST?Variable not set}`) && PathPrefix(`/staging/redis`)
      - traefik.http.middlewares.strip-staging.stripprefix.prefixes=/staging
      - traefik.http.routers.staging-redis-http.middlewares=strip-staging

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    restart: always
    volumes:
      - app-backend-model-cache:/app/cache
      - app-upload-data:/app/upload-data
    networks:
      - traefik-public
      - default
    depends_on:
      - redis
      - db
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - USER_AGENT=${USER_AGENT}
      - MAX_WORKERS=${MAX_WORKERS}
      - FASTEMBED_CACHE_PATH=/app/cache
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - QDRANT__SERVICE__API_KEY=${QDRANT__SERVICE__API_KEY?Variable not set}
      - DENSE_EMBEDDING_MODEL=${DENSE_EMBEDDING_MODEL?Variable not set}
      - SPARSE_EMBEDDING_MODEL=${SPARSE_EMBEDDING_MODEL?Variable not set}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}
      - RECURSION_LIMIT=${RECURSION_LIMIT}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY?Variable not set}
    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.staging-backend.loadbalancer.server.port=80
      - traefik.http.routers.staging-backend-http.rule=Host(`${HOST?Variable not set}`) && PathPrefix(`/staging/api`, `/staging/docs`, `/staging/redoc`)
      - traefik.http.middlewares.strip-staging.stripprefix.prefixes=/staging
      - traefik.http.routers.staging-backend-http.middlewares=strip-staging

  celery:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    restart: always
    volumes:
      - app-backend-model-cache:/app/cache
      - app-upload-data:/app/upload-data
    command: poetry run celery -A app.core.celery_app.celery_app worker --loglevel=info --uid=celery --gid=celery --max-memory-per-child=${MAX_MEMORY_PER_CHILD?Varible not set}
    depends_on:
      - redis
      - backend
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - USER_AGENT=${USER_AGENT}
      - MAX_WORKERS=${MAX_WORKERS}
      - FASTEMBED_CACHE_PATH=/app/cache
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - QDRANT__SERVICE__API_KEY=${QDRANT__SERVICE__API_KEY?Variable not set}
      - DENSE_EMBEDDING_MODEL=${DENSE_EMBEDDING_MODEL?Variable not set}
      - SPARSE_EMBEDDING_MODEL=${SPARSE_EMBEDDING_MODEL?Variable not set}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY?Variable not set}

  flower:
    image: mher/flower:2.0
    restart: always
    networks:
      - traefik-public
      - default
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    command:
      - celery
      - "--broker=redis://redis:6379/0"
      - flower
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.staging-flower-http.entrypoints=http
      - traefik.http.services.staging-flower.loadbalancer.server.port=5555
      - traefik.http.routers.staging-flower-http.rule=Host(`${HOST?Variable not set}`) && PathPrefix(`/staging/flower`)
      - traefik.http.middlewares.strip-staging.stripprefix.prefixes=/staging
      - traefik.http.routers.staging-flower-http.middlewares=strip-staging

  frontend:
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}"
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_BASE_URL=/staging
        - VITE_API_URL=http://${HOST?Variable not set}/staging
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.services.staging-frontend.loadbalancer.server.port=8080
      - traefik.http.routers.staging-frontend-http.entrypoints=http
      - traefik.http.routers.staging-frontend-http.rule=Host(`${HOST?Variable not set}`) && PathPrefix(`/staging`)
      - traefik.http.middlewares.strip-staging.stripprefix.prefixes=/staging
      - traefik.http.routers.staging-frontend-http.middlewares=strip-staging

volumes:
  app-db-data:
  app-qdrant-data:
  app-backend-model-cache:
  app-upload-data:

networks:
  traefik-public:
    external: true
