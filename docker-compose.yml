services:
  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_PORT=${POSTGRES_PORT}

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`adminer.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.rule=Host(`adminer.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME?Variable not set}-adminer.loadbalancer.server.port=8080

  qdrant:
    image: qdrant/qdrant
    restart: always
    volumes:
      - app-qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT__SERVICE__API_KEY?Variable not set}
    networks:
      - default

  redis:
    image: redis:alpine
    restart: always
    networks:
      - default

  backend:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    restart: always
    volumes:
      - app-backend-model-cache:/app/cache
      - app-upload-data:/app/upload-data
    networks:
      - traefik-public
      - default
    depends_on:
      - redis
      - db
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - USER_AGENT=${USER_AGENT}
      - MAX_WORKERS=${MAX_WORKERS}
      - FASTEMBED_CACHE_PATH=/app/cache
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - QDRANT__SERVICE__API_KEY=${QDRANT__SERVICE__API_KEY?Variable not set}
      - DENSE_EMBEDDING_MODEL=${DENSE_EMBEDDING_MODEL?Variable not set}
      - SPARSE_EMBEDDING_MODEL=${SPARSE_EMBEDDING_MODEL?Variable not set}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}
      - RECURSION_LIMIT=${RECURSION_LIMIT}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - OPENAI_API_KEY=${OPENAI_API_KEY?Variable not set}
      - GIGACHAT_AUTH_TOKEN=${GIGACHAT_AUTH_TOKEN?Variable not set}

    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`) && PathPrefix(`/api`, `/docs`, `/redoc`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect

  celery:
    image: "${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}"
    container_name: celery
    restart: always
    volumes:
      - app-backend-model-cache:/app/cache
      - app-upload-data:/app/upload-data
    command: poetry run celery -A app.core.celery_app.celery_app worker --loglevel=info --uid=celery --gid=celery --max-memory-per-child=${MAX_MEMORY_PER_CHILD?Varible not set}
    depends_on:
      - redis
      - backend
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - USER_AGENT=${USER_AGENT}
      - MAX_WORKERS=${MAX_WORKERS}
      - FASTEMBED_CACHE_PATH=/app/cache
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - QDRANT__SERVICE__API_KEY=${QDRANT__SERVICE__API_KEY?Variable not set}
      - DENSE_EMBEDDING_MODEL=${DENSE_EMBEDDING_MODEL?Variable not set}
      - SPARSE_EMBEDDING_MODEL=${SPARSE_EMBEDDING_MODEL?Variable not set}
      - MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}
      - RECURSION_LIMIT=${RECURSION_LIMIT}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - QDRANT_URL=${QDRANT_URL:-http://qdrant:6333}
      - OPENAI_API_KEY=${OPENAI_API_KEY?Variable not set}
      - GIGACHAT_AUTH_TOKEN=${GIGACHAT_AUTH_TOKEN?Variable not set}

  flower:
    image: mher/flower:2.0
    restart: always
    networks:
      - traefik-public
      - default
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    command:
      - celery
      - "--broker=redis://redis:6379/0"
      - flower
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.rule=Host(`flower.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME?Variable not set}-flower.loadbalancer.server.port=5555

  frontend:
    image: "${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}"
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://${DOMAIN?Variable not set}
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=8080
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.rule=Host(`${DOMAIN?Variable not set}`, `www.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls.certresolver=le
      # Handle domain with and without "www" to redirect to only one
      # To disable www redirection remove the next line
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^http(s)?://www.(${DOMAIN?Variable not set})/(.*)
      # Redirect a domain with www to non-www
      # To disable it remove the next line
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=http$${1}://${DOMAIN?Variable not set}/$${3}
      # Middleware to redirect www, to disable it remove the next line
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
      # Middleware to redirect www, and redirect HTTP to HTTPS
      # to disable www redirection remove the section: ${STACK_NAME?Variable not set}-www-redirect,
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=https-redirect,${STACK_NAME?Variable not set}-www-redirect
  n8n-db-init:
    image: postgres:12
    restart: "no"
    depends_on:
      - db
    networks:
      - default
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD?Variable not set}          # superuser password
      - PGHOST=db
      - PGPORT=${POSTGRES_PORT}
      - PGUSER=${POSTGRES_USER?Variable not set}                  # superuser (from your db service)
      - N8N_DB=${POSTGRES_DB_N8N?Variable not set}
      - N8N_USER=${POSTGRES_USER_N8N?Variable not set}
      - N8N_PASS=${POSTGRES_PASSWORD_N8N?Variable not set}
    entrypoint: [ "bash", "-lc" ]
    command: |
      set -Eeuo pipefail

      # Wait for Postgres
      until pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER"; do sleep 1; done

      # Escape single quotes in password for SQL literal
      esc_pass=${N8N_PASS//\'/\'\'}

      # Create role if missing
      role_exists="$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='${N8N_USER}'" postgres || true)"
      if [ "$role_exists" != "1" ]; then
        psql -v ON_ERROR_STOP=1 -d postgres -c "CREATE ROLE \"${N8N_USER}\" LOGIN PASSWORD '${esc_pass}';"
      fi

      # Create database if missing, owned by role
      db_exists="$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='${N8N_DB}'" postgres || true)"
      if [ "$db_exists" != "1" ]; then
        psql -v ON_ERROR_STOP=1 -d postgres -c "CREATE DATABASE \"${N8N_DB}\" OWNER \"${N8N_USER}\" ENCODING 'UTF8';"
      fi

      # Schema + defaults inside n8n DB
      psql -v ON_ERROR_STOP=1 -d "$N8N_DB" -c "CREATE SCHEMA IF NOT EXISTS n8n AUTHORIZATION \"${N8N_USER}\";"
      psql -v ON_ERROR_STOP=1 -d "$N8N_DB" -c "GRANT ALL PRIVILEGES ON SCHEMA n8n TO \"${N8N_USER}\";"
      psql -v ON_ERROR_STOP=1 -d "$N8N_DB" -c "ALTER ROLE \"${N8N_USER}\" IN DATABASE \"${N8N_DB}\" SET search_path TO n8n, public;"
  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    restart: always
    # Internal port only; Traefik will route to it
    expose:
      - "5678"
    depends_on:
      - db
      - redis
    networks:
      - traefik-public
      - default
    environment:
      - N8N_HOST=n8n.${DOMAIN?Variable not set}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://n8n.${DOMAIN?Variable not set}/
      - GENERIC_TIMEZONE=Europe/Moscow
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY?Variable not set}
      # Use Postgres instead of SQLite
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=${POSTGRES_PORT}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB_N8N?Variable not set}
      - DB_POSTGRESDB_USER=${POSTGRES_USER_N8N?Variable not set}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD_N8N?Variable not set}
      - DB_POSTGRESDB_SCHEMA=n8n

      # Queue mode via your Redis
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=2
      # Optional hardening / noise off
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_HIRING_BANNER_ENABLED=false
      # (If you later switch to Postgres, set DB_* here)
    volumes:
      - app-n8n-data:/home/node/.n8n
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public

      # HTTP -> HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-n8n-http.rule=Host(`n8n.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-n8n-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-n8n-http.middlewares=https-redirect

      # HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-n8n-https.rule=Host(`n8n.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-n8n-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME?Variable not set}-n8n-https.tls=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-n8n-https.tls.certresolver=le

      # Point Traefik to the app’s internal port
      - traefik.http.services.${STACK_NAME?Variable not set}-n8n.loadbalancer.server.port=5678
  n8n-worker:
    image: docker.n8n.io/n8nio/n8n:latest
    restart: always
    depends_on: [db, redis]
    networks: [default]
    command: n8n worker
    environment:
      # must match the main instance
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY?Variable not set}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=${POSTGRES_PORT}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB_N8N?Variable not set}
      - DB_POSTGRESDB_USER=${POSTGRES_USER_N8N?Variable not set}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD_N8N?Variable not set}
      - DB_POSTGRESDB_SCHEMA=n8n
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=2
      # Optional: set worker concurrency
      - N8N_WORKER_CONCURRENCY=2
volumes:
  app-db-data:
  app-qdrant-data:
  app-backend-model-cache:
  app-upload-data:
  app-n8n-data:

networks:
  traefik-public:
    external: true
